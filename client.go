package main

import (
	"log"
	"net/http"

	_ "github.com/jackc/pgx/v4/stdlib"

	"github.com/te6lim/go-chat/chat"
	"github.com/te6lim/go-chat/config"
	"github.com/te6lim/go-chat/database"
	"github.com/te6lim/go-chat/routes"
)

func main() {

	database.ConnectToDB()

	pingErr := database.Instance.Ping()
	if pingErr != nil {
		log.Fatal(pingErr)
	}

	defer database.Instance.Close()

	routes.RegisterUserRoutes()
	routes.RegisterChatRoutes()

	go chat.ListenForActiveUsers()
	go chat.ListenForNewChatRoom()
	//go ListenForCollectInputFlag()

	http.Handle("/", config.Router)
	log.Println("Server started on localhost:8080")
	if err := http.ListenAndServe(":8080", nil); err != nil {
		log.Fatal(err)
	}
}

// for testing purposes
/*func ListenForCollectInputFlag() {
	for user := range chat.AskForUserToChatWith {
		var contact string
		fmt.Print("Enter username to chat with: ")
		fmt.Scanln(&contact)
		if contact != "/" {

			if database.GetUser(contact) != nil {
				fmt.Println("Welcome to chat room with ", contact)

				// For now the room is generated with the combination of the two users
				// This will be changed to a unique id generated by the server
				roomId, err := utils.GenerateRoomId(user.Username, contact)
				if err != nil {
					log.Fatal(err)
				}
				var room *chat.Room
				if chat.Rooms[roomId] == nil {
					room = chat.CreateRoom(roomId)
					chat.AddRoom <- room
					go room.Run()
				} else {
					room = chat.Rooms[roomId]
				}
				SetupChat(user.Username, contact, room)
			} else {
				fmt.Println("This user does not exist! Please enter a valid user")
			}
		}
	}
}*/
